---
layout: post
title:  "Solving the Advent of Code - 2015 Day 1"
date:   2018-11-15 16:46:00
comments: true
disqus: false
categories: Programming challenges AdventOfCode.com python puzzles
---


The Advent of Code (AdventOfCode.com) website hosts many CTF-like events, with a variety of programming puzzles to solve. It was developed by `Eric Wastl`, the author of Vanilla JS, PHP Sadness and other cool projects. The Events are usually hosted annuanly, in December. The events and the puzzles are packaged with a festive touch and in each level the challenger will need to resolve issues relating to christmas using his programming knowledge. These puzzles were developed for a variety of skill sets and skill levels, and are solvable using any programming language of choice. Each puzzles are unique, small and fun to solve. They do not not require specialised hardware.



##### Challenge Description:
- Name: "The Advent of Code - 2015 Day 1: Not Quite Lisp"
- Difficulty: Easy
- Category: Programming
- Rating/Award: 2 Stars
- Prerequisite: Sign Up - Free
- Host: <a href="https://adventofcode.com/2015/day/1" target="_blank">AdventOfCode.com</a> - Season 2015
![fd-pwnablekr-challenge-description](/assets/images/adventofcodecom/season2015/main_art.png)

###### Rules:
No rules were specified on the challenge website.


##### Tl;dr:
Day 1 has one puzzle, but it is made up of two parts. The puzzle is based on parsing a long stream of characters. The stream of characters is comprised of two types of characters, '(' and ')'. Both are instructions, the opening parenthesis, '(' instruction is defined to move Santa 1 floor up in an appartment building. The closing parenthesis, ')' instruction does the opposite, moves Santa 1 floor down. The Appartment building have endless floors going in either direction. Thus, it is possible to be at floor -10, in the basement. The first part of the puzzle requires to find the floor that Santa ends up at when all the instructions have been compeleted. In the second part, it is required to find the instruction number that places Santa in floor -1 (basement) for the first time. Python(3) is used to solve the puzzle, since it is simple.


##### Solving the challenge
Like any other challenges it is important to understand the puzzle and its parameters. The puzzle description is the best place to start, there are no binaries and source code to analyse.

A breif summary of the puzzle description would be:
+ Santa starts at ground floor, floor 0 and follows 1 instruction at a time.
+ An opening parenthesis, '(' instructs Santa to go 1 floor up.
+ A closing Parenthesis, ')' instructs Santa to go 1 floor down.
+ The appartment building has endless floors going in either direction (up and down).

For the full description please see figure 1, below.

Figure 1: The Full Challenge Description
![fd-pwnablekr-challenge-description](/assets/images/adventofcodecom/day1/challenge_description.png)

###### Obtaining the Instruction set
To get the instructions for Santa, click on the <a href="https://adventofcode.com/2015/day/1/input" target="_blank">get your puzzle input</a> link in the puzzle description. For the link to work, you will need to be signed in first. The link should open another tab and it should look similair to:

`((((()(()(((((((()))(((()((((()())(())()((...`

##### Identifying an attack surface: Part 1
The first part of the puzzle, requires to find the floor which Santa ends up at when all instructions have been completed. To be able to solve this programatically, each instruction in the set needs to be checked whether if it is an increment or decrement of floor and a method of keeping track of current floor. In programming we can store numbers, current floor using variables in memory. Also, it is possible to check each instruction one by one using the `For loop`. The `For loop` goes through each item chronologically and executes predfined code. Maybe there are many methods of solving this puzzle, however, two methods that redily comes to mind are:

###### Method 1

chornologically each characters should be

{% highlight bash %}
    vim fd.c
{% endhighlight %}

Figure 4: Source code of fd shown in vim editor- vim fd.c
![strings-analysis-of-fd-binary](/assets/images/fd-pwnablekr/fd-source-file-vim.png)



##### Congratulations

Figure 6: The success message and the flag printed out to the console.
![The success message: 'Good job :)', the flag 'mommy! I think I know what a file descriptor is!!'](/assets/images/fd-pwnablekr/fd-success.png)

Dont forget to validate your flag on <a href="http://www.pwnable.kr/play.php" target="_blank">Pwnable.kr</a>:

Figure 7: Validating the flag on Pwnable.kr (first challenge):
![](/assets/images/fd-pwnablekr/fd-validate.png)

##### Notes


##### Sources - Helpful links

